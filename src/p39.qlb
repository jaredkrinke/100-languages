"Create list of perimeters and set most frequent (i.e. best) value to zero with count of zero"
(حدد تواجدات (عدم))
(حدد أفضل-عدد ٠)
(حدد أفضل ٠)

"Count occurrences in list of perimeters"
(حدد احصل-على-العد (لامدا (رقم)
  (حدد عد ٠)
  (طبق (لامدا (عنصر)
      (إذا (يساوي؟ عنصر رقم)
      (عدل عد (جمع ١ عد)))
      ٠)
    تواجدات)
  عد))

"Prepend a perimeter to the list of perimeters"
(حدد إضافة-تكرار (لامدا (رقم)
  (عدل تواجدات (كونس رقم تواجدات))
  (حدد عد (احصل-على-العد رقم))
  (إذا (أكبر؟ عد أفضل-عدد)
    (إفعل
      (عدل أفضل-عدد عد)
      (عدل أفضل رقم))
    ٠)))

"Run a lambda n times, supplying n as an argument (note: built-in version seems broken)"
(حدد بديهي (لامدا (رقم دالة)
  (حدد صغير ٠)
  (كرر رقم (لامدا ()
    (عدل صغير (جمع ١ صغير))
    (دالة صغير)))))

"Modulus"
(حدد المعامل (لامدا (كبير صغير)
  (طرح كبير (ضرب صغير (أرض (قسم كبير صغير))))))

"Is even"
(حدد حتى (لامدا (قيمة)
  (يساوي؟ ٠ (المعامل قيمة ٢))))

"Greatest common divisor (recursive Euclid's algorithm)"
(حدد القاسم-المشترك-الأكبر (لامدا (كبير صغير)
  (إذا (يساوي؟ صغير ٠)
    كبير
    (القاسم-المشترك-الأكبر صغير (المعامل كبير صغير)))))

"Loop through m, n (m max of 31 determined via algebra), ensure coprime and one even, then add valid perimeters to list"
(بديهي ٣١ (لامدا (يسار)
  (بديهي (طرح يسار ١) (لامدا (يمين)
    (إذا (و (أو (حتى يسار) (حتى يمين))
        (يساوي؟ ١ (القاسم-المشترك-الأكبر يسار يمين)))
      (إفعل
        (حدد محيط (ضرب ٢ يسار (جمع يسار يمين)))
        (بديهي (قسم ١٠٠٠ محيط) (لامدا (مضاعف)
          (حدد حاصل-الضرب (ضرب مضاعف محيط))
          (إذا (أصغر-أو-يساوي؟ حاصل-الضرب ١٠٠٠)
            (إضافة-تكرار حاصل-الضرب)
            ٠))))
      ٠)))))

"Print most frequence perimeter"
(قول أفضل)
