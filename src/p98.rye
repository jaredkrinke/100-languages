; Algorithm: first, count characters in words to find anagrams, then compute
; the transformation required for each anagram pair (by counting the first
; character as "1", second as "2", etc., using previous digits for repeated
; characters--note that the pattern of the source word must also be included to
; distinguish "abc" from "abb" or "aba"), and finally find the intersection of
; word and square transformations and take the largest square.
; Original by Jared Krinke, updated by Janko Metelko

; Utilities
permute-pairs: fn { list } { .map { ::x list |filter { = x |not } |map { ::y [ x y ] } } |unpack }

; Anagram finder (list of lists)
find-anagrams: fn { l } {
  .map { ::w [ w sort w ] } :info
  |map { .second } |sort |partition { , } |filter { .length? > 1 } |map { .first } :anagrams
  info .filter { .second .contains* anagrams }
    |map { .first }
	  |group { .sort }
	  |values .to-block
    |map { .permute-pairs }
    |unpack
}

; "Normalize" two words (could be digits or letters) by calculating the position of characters of a in b
get-transformation: fn { pair } {
  .second :b , .first :a
  |split "" |vals\with {
	  .map { .position?* a } |join ,
	  .map { .position?* b } |join
  } |join\with "-"
}

; Find anagrams from words file and keep transformations only
word-anagrams:
  split\quoted read %0098_words.txt "," `"`                     ;"
    |find-anagrams
    |map { .get-transformation }
  ,

; Find square anagrams and compute each pair's transformation, keeping that and the larger square
square-anagrams:
  range 1 1000
    |map { ::n , n * n |to-string }
    |find-anagrams
    |map { .vals\with { .map { .to-integer } |max , .get-transformation } }
  ,

; Intersect the two lists
anagramic-squares:
  square-anagrams
    |filter { .second .contains* word-anagrams }
    |map { .first }
    |print
  ,
